/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteRouteImport } from './routes/app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppIndexRouteImport } from './routes/app/index'
import { Route as AppSettingsRouteImport } from './routes/app/settings'
import { Route as AppSearchRouteImport } from './routes/app/search'
import { Route as AppProfileRouteImport } from './routes/app/profile'
import { Route as AppHelpRouteImport } from './routes/app/help'
import { Route as AppAuthRouteImport } from './routes/app/auth'
import { Route as AppArticleRouteImport } from './routes/app/article'

const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppSettingsRoute = AppSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppSearchRoute = AppSearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppProfileRoute = AppProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppHelpRoute = AppHelpRouteImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppAuthRoute = AppAuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppArticleRoute = AppArticleRouteImport.update({
  id: '/article',
  path: '/article',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/article': typeof AppArticleRoute
  '/app/auth': typeof AppAuthRoute
  '/app/help': typeof AppHelpRoute
  '/app/profile': typeof AppProfileRoute
  '/app/search': typeof AppSearchRoute
  '/app/settings': typeof AppSettingsRoute
  '/app/': typeof AppIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app/article': typeof AppArticleRoute
  '/app/auth': typeof AppAuthRoute
  '/app/help': typeof AppHelpRoute
  '/app/profile': typeof AppProfileRoute
  '/app/search': typeof AppSearchRoute
  '/app/settings': typeof AppSettingsRoute
  '/app': typeof AppIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/article': typeof AppArticleRoute
  '/app/auth': typeof AppAuthRoute
  '/app/help': typeof AppHelpRoute
  '/app/profile': typeof AppProfileRoute
  '/app/search': typeof AppSearchRoute
  '/app/settings': typeof AppSettingsRoute
  '/app/': typeof AppIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/app/article'
    | '/app/auth'
    | '/app/help'
    | '/app/profile'
    | '/app/search'
    | '/app/settings'
    | '/app/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app/article'
    | '/app/auth'
    | '/app/help'
    | '/app/profile'
    | '/app/search'
    | '/app/settings'
    | '/app'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/app/article'
    | '/app/auth'
    | '/app/help'
    | '/app/profile'
    | '/app/search'
    | '/app/settings'
    | '/app/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/settings': {
      id: '/app/settings'
      path: '/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof AppSettingsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/search': {
      id: '/app/search'
      path: '/search'
      fullPath: '/app/search'
      preLoaderRoute: typeof AppSearchRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/profile': {
      id: '/app/profile'
      path: '/profile'
      fullPath: '/app/profile'
      preLoaderRoute: typeof AppProfileRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/help': {
      id: '/app/help'
      path: '/help'
      fullPath: '/app/help'
      preLoaderRoute: typeof AppHelpRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/auth': {
      id: '/app/auth'
      path: '/auth'
      fullPath: '/app/auth'
      preLoaderRoute: typeof AppAuthRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/article': {
      id: '/app/article'
      path: '/article'
      fullPath: '/app/article'
      preLoaderRoute: typeof AppArticleRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppArticleRoute: typeof AppArticleRoute
  AppAuthRoute: typeof AppAuthRoute
  AppHelpRoute: typeof AppHelpRoute
  AppProfileRoute: typeof AppProfileRoute
  AppSearchRoute: typeof AppSearchRoute
  AppSettingsRoute: typeof AppSettingsRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppArticleRoute: AppArticleRoute,
  AppAuthRoute: AppAuthRoute,
  AppHelpRoute: AppHelpRoute,
  AppProfileRoute: AppProfileRoute,
  AppSearchRoute: AppSearchRoute,
  AppSettingsRoute: AppSettingsRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
